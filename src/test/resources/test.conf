input {
    loghub.receivers.ZMQ { listen: "inproc://listener", decoder: loghub.decoders.StringCodec }
} | $zmq
output $zmq | {
    loghub.senders.ZMQ { destination: "inproc://sender", encoder: loghub.encoders.ToJson, type: "PUSH" }
}
pipeline[zmq] {
    [a] = "1"
    | [b] = "8.8.8.8"
    | (java.lang.Integer) [a]
    | loghub.processors.NettyNameResolver { 
        fields: ["b"],
        resolver: "8.8.8.8",
        timeout: 30
    }
    | loghub.processors.Grok {
        pattern: "%{HOSTNAME:.}\\.google\\.com",
        fields: ["b"],
    }
}
pipeline[oneref] { loghub.processors.Geoip2 { types: ["country"] } }
// The main pipe
pipeline[main] {
    log("event",DEBUG)
    | [logger_name] == "jrds.starter.Timer" || event.info > 4 ? log("event.info", INFO) : ( loghub.processors.Identity | loghub.processors.Identity )
    | $oneref
    + $forked
    | [bla] ? ( loghub.processors.Identity {} > $empty )
    | [bla]-
    | [bla] < [nobla]
    | [nobla] = [bla] + 2
    | [found] = [name] =~ /some/
    | [sub value] = 3
    | loghub.processors.Identity { if: [value] != "some", success: ([b] = 1 | [c] = 2), failure: [d] = 3}
    | [date] = "${%ta} ${%tb} ${%td} ${%tT} ${%tZ} ${%tY}"([@timestamp])
    | (java.lang.Integer) [count]
    | [endfield] @ [field] {
        "a": 1,
        "b": 2,
    }
    | fire { [a] = 1 ; [b] = [bla] * 3 } > $main
    | drop
    | loghub.processors.Identity {
        success: {
            (java.lang.Integer) [a]
            | (java.lang.Integer) [b]
        }
    }
    | [a] @ [a] %source1
    | path [b] (
          loghub.processors.Identity | loghub.processors.Identity
      )
}
pipeline [empty] { }
pipeline [groovy] { loghub.processors.Groovy { script: "println event['logger_name']" } }
pipeline [forked] { loghub.processors.Identity }
logfile: "machin"
plugins: ["/etc", "/c"]
jmx.protocol: "jmxmp"
/****
 * a multi lines comment
 ****/
sources:
    source1: loghub.sources.FileMap {
        mappingFile: "target/classes/ipfix-information-elements.csv",
        keyName: "ElementID",
        valueName: "Name"
    }
timezone: "CET"
locale: "en"
queueDepth: 5
numWorkers: 2
// log4j.defaultlevel: "trace" Don't work now
log4j.configFile: "target/test-classes/testlog4j.xml"
maxSteps: 256
includes: ["target/test-classes/includes"]

